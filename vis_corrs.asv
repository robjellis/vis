function [stats, im1vals, im2vals] = vis_corrs(choice)
%
% Image comparison utility: x-y plot of values in two images on a voxel-by-voxel basis.
%
% Optimized for SPM5/SPM8 and requires it to be running in the background.
%
% Assumes both images have the SAME DIMENSIONS.
%
% version = 2011.11.30


%
%    This program is part of a set of image visualization tools for MR images, and is 
%    made available the neuroimaging community as copyright freeware. 
%
%    You can redistribute it and/or modify
%    it under the terms of the GNU General Public License as published by
%    the Free Software Foundation, either version 3 of the License, or
%    (at your option) any later version.
%
%    It is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.  
%    See the GNU General Public License for more details.
%
%    A copy of the GNU General Public License is included in the main directory for vis: vis_tools/gpl3.txt.
%          
%    Notes:
%
%
%    * Portions of the code call SPM functions (http://www.fil.ion.ucl.ac.uk/spm), 
%      which is also released under the GNU General Public License.  SPM
%      must be installed and running for sCM to work
%
%    * Documentation is available at http://tools.robjellis.net
%
%    * For more information, please contact Rob Ellis at
%      robjellis@gmail.com
%
%
%    Copyright (C) 2011 by Robert J Ellis
%   

% ********
% default: no quantile-quantile plot

if choice == 3
   plotqq = 0;
elseif choice == 4
    
elseif choice == 5
   plotqq = 0; 
end

fprintf('\n\n Pearson correlation between two (sets of) images at every voxel. \n 1. Select [Group1 and Group2] files. \n 2. Select whether to exclude zeros from 1st, 2nd, or neither image. \n 3. Result will plot in a new figure. \n\n');

file_sel = input('\n\n File selection: \n   [1] single pair of files from one directory \n   [2] separate selection of Group1 and Group2 files: ');

if file_sel == 1
    files = spm_select(2,'image','Select a pair of files:',[],pwd,'.*');
    files1 = files(1,:);
    files2 = files(2,:);
elseif file_sel == 2
    files1=spm_select([1 Inf],'image','Select x-axis file(s):',[],pwd,'.*');
    files2=spm_select([1 Inf],'image','Select y-axis file(s):',[],pwd,'.*');
end
% same number of files?

if size(files1,1) == size(files2,1)
    % OK
    numf = size(files1,1);
else
    fprintf('\n Warning: x-axis files and y-axis files do not have the same number. Terminating.\n\n')
    return
end

rnd = 0;

% select the masking template

use_mask = input(' Use implicit mask?: [1] yes; [2] no: ');

if use_mask == 1
mask=spm_select(1,'image','Select inclusive mask:',[],pwd,'.*');
 vm = spm_read_vols(spm_vol(mask));
 vm(isnan(vm)) = 0;  % replaces NaNs with zero
 [x1 y1 z1] = size(vm);
 
 % binarize the mask
 
 vm = vm ~= 0;
 
 vm2 = vm(:);
 
 
 
end 

minex = input(' Only include values above V? [1] yes; [2] no: ');

if minex == 2
    
excz = input(' Exclude voxels with zeros in [1] first, [2] second, or [3] either image: ');

elseif minex == 1
    minval = input(' Enter minimum value V: ');
    excz = 3;
end

% useful variables
stats = zeros(numf,7);

% plot figs?

if numf > 1
    plotfigs = input('\n Plot scatterplots? [1] yes; [2] no: ');
else
    plotfigs = 1;
end

% *********************
% file loop

fprintf('\n Working ... ');
for i = 1:numf

% read in both volumes
 
 namef1 = files1(i,:);
 namef1b = namef1;
  if namef1(numel(namef1) - 1) == ','   % gets rid of ",1" at end of file name (as needed)
     namef1b = namef1(1:(numel(namef1)-2));
     namef1b = dir(namef1b);
     [namef1b] = namef1b.('name');
 end
 vol1 = spm_read_vols(spm_vol(namef1));
 [x1 y1 z1] = size(vol1);
 dim1 = size(vol1);
  
 namef2 = files2(i,:);
 namef2b = namef2;
 if namef2(numel(namef2) - 1) == ','
     namef2b = namef2(1:(numel(namef2)-2));
     namef2b = dir(namef2b);
     [namef2b] = namef2b.('name');
 end

 vol2 = spm_read_vols(spm_vol(namef2));
 [x2 y2 z2] = size(vol2);
 dim2 = size(vol2);

 
 % compare sizes of volumes

 
 if sum(dim1 - dim2) == 0
     %fprintf('\n \n The scatter plot images have the same dimensions ...\n');
 else
     fprintf('\n \n Volumes do NOT have the same dimensions. Terminating. \n\n\n');
     return
 end
 
 % make sure same size with mask
if use_mask == 1
if sum(size(vm) - size(vol1)) == 0
    %fprintf('\n Mask and images have the same dimensions ... \n');
else
    fprintf('\n Mask and images do NOT have the same dimensions. Terminating. \n\n\n');
    return
end
end



% turn each volume into a single column of data, which will be the x and y
% coordinates of the plot we want to see

v1s = vol1(:);
v2s = vol2(:);


% turn NaNs into zeros

v1s(isnan(v1s)) = 0;
v2s(isnan(v2s)) = 0;

%size(v1s);
%size(v2s);
% retain file values where the mask is not 0 
if use_mask == 1
v1s = v1s(vm2 ~= 0);  
v2s = v2s(vm2 ~= 0);  

end

ss = v1s + v2s;

% retain values from the x and y columns where their sum does not equal 0;
% gets rid of non-brain zero values

v1b = v1s(ss ~=0);
v2b = v2s(ss ~=0);


% exclude zeros option


%if excz == '3'
%    v1 = v1b;           % retain all values
%    v2 = v2b;
    
if excz == 1
    % exclude zeros based on 1st image mask
    v1 = v1b(v1b ~= 0);
    v2 = v2b(v1b ~= 0);

elseif excz == 2
    % exclude zeros based on 2nd image mask
    v1 = v1b(v2b ~= 0);
    v2 = v2b(v2b ~= 0);
    
elseif excz == 3
    % only include non-zero voxels in BOTH images
    v1t = v1b(v1b ~= 0);
    v2t = v2b(v1b ~= 0);
    v1 = v1t(v2t ~= 0);
    v2 = v2t(v2t ~= 0);
    
end

if minex == 1
    
    v1t = v1b(v1b > minval);           % retain values above minval
    v2t = v2b(v1b > minval);

    v1 = v1t(v2t > minval);
    v2 = v2t(v2t > minval);
end



v3 = [v1, v2];

if size(v3) == [0 0]
    fprintf('\n There are no voxels that meet this criteria when zeros are excluded. Respecify. \n\n');
    vis_corrs
end

min1 = floor(min(min(v1)));
max1 = ceil(max(max(v1)));
min2 = floor(min(min(v2)));
max2 = ceil(max(max(v2)));

min3 = min(min1,min2);
max3 = max(max1,max2);

bb = [min1,max1,min2,max2];
min4 = min(bb);
max4 = max(bb);


[r_val,p_val] = corr(v1,v2);     %the pearson correlation between v1 and v2; outputs r and p values

% record important stats
stats(i,1) = i;
stats(i,2) = r_val;
stats(i,3) = atanh(r_val);  % Fisher's z transform: z = 0.5*ln((1+r)/(1-r)) = atanh(r)
stats(i,4) = mean(v1);
stats(i,5) = mean(v2);
stats(i,6) = max(v1);
stats(i,7) = max(v2);

im1vals = v1;
im2vals = v2;



% =========================
% figures

if plotfigs == 1
    if choice == 3
        figure(30)
        plot(v1,v2,'+')
        % hold on
        %plot([-100,100],[-100,100],'LineWidth',2,'Color','r');

        axis([min1 max1 min2 max2]);
        lx = xlabel(strcat(['File: ',namef1b])); ly = ylabel(strcat(['File: ',namef2b])); title('Scatter plot'); whitebg('w');
        set(lx,'Interpreter','none'); set(ly,'Interpreter','none');
        hold off

        if numf > 1
           pause(0.5)  
        end

    elseif choice == 4
        im1q = quantile(im1vals,[0:.01:1])';
        im2q = quantile(im2vals,[0:.01:1])';
        [quant_r, quant_p] = corr(im1q,im2q);
        
        figure(31)
        qqplot(im1vals,im2vals,0:1:100);  % if values fall on a straight line, the two distributions are the same
        hold on
        lx = xlabel([namef1b ' quantiles']); ylabel([namef2b ' quantiles']); title('Quantile-Quantile Plot'); whitebg('w');
        set(lx,'Interpreter','none'); set(ly,'Interpreter','none');
        hold off
    
    elseif choice == 5
        % transformation for Bland-Altman plot
        % see http://en.wikipedia.org/wiki/Bland%E2%80%93Altman_plot

        ba1 = (im1vals + im2vals) / 2;
        ba2 =  im1vals - im2vals;
        
        xlabel('Image1 - Image2');
        ylabel('

        % lines for 2 SD

        errbar = 2 * std(ba2);

        err_plus = mean(ba2) + errbar
        err_min  = mean(ba2) - errbar
        
        figure(32)   
        plot(ba1,ba2,'+')
        hold on
        
    
    end
end

end % file loop

%=== print results

if numf == 1
    if choice == 3
        fprintf([' The ' num2str(length(v1)) ' image values are correlated with r = ' num2str(r_val) ', p = ' num2str(p_val) '. \n']);
    elseif choice == 4
        fprintf([' The 101 values in the Q-Q plot are correlated with r = ' num2str(quant_r) ', p = ' num2str(quant_p) '. \n']);
    elseif choice == 5
        fprintf([' The ' num2str(length(v1)) ' image values are shown in a Bland-Altman plot. \n']);    
    end
    
end

fprintf('\n Analysis complete. \n Table of statistics results saved as "corr_stats".\n\n');
fprintf('\n   1. subject \n   2. r-value \n   3. Fisher r-to-z \n   4. mean(X) \n   5. mean(Y) \n   6. max(X) \n   7. max(Y)\n\n');


